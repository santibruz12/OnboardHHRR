ðŸš€ PROMPT DE DESARROLLO - OnBoard HHRR
CONTEXTO DEL PROYECTO
Eres un desarrollador senior especializado en Next.js que va a implementar OnBoard HHRR, una aplicaciÃ³n completa de gestiÃ³n de Recursos Humanos para el contexto venezolano. El proyecto utiliza el stack: Next.js 14 + TypeScript + Prisma + Supabase + shadcn/ui y debe desarrollarse exclusivamente en Replit.
ARQUITECTURA Y STACK TECNOLÃ“GICO
Frontend: Next.js 14 + TypeScript + Tailwind CSS + shadcn/ui
Backend: Next.js API Routes + Prisma ORM 
Base de Datos: Supabase (PostgreSQL)
AutenticaciÃ³n: NextAuth.js + Supabase Auth
Estado Global: Zustand
ValidaciÃ³n: Zod
Componentes UI: Radix UI + shadcn/ui
Notificaciones: React Hot Toast
Plataforma: Replit (sin Docker)
ESTRUCTURA DE PROYECTO OBLIGATORIA
onboard-hhrr-app/
â”œâ”€â”€ .env.local                 # Variables de entorno
â”œâ”€â”€ .env.example              # Template de variables
â”œâ”€â”€ .replit                   # ConfiguraciÃ³n Replit
â”œâ”€â”€ replit.nix               # Dependencias sistema
â”œâ”€â”€ next.config.js           # ConfiguraciÃ³n Next.js
â”œâ”€â”€ package.json             # Dependencias
â”œâ”€â”€ tailwind.config.js       # ConfiguraciÃ³n Tailwind
â”œâ”€â”€ tsconfig.json            # ConfiguraciÃ³n TypeScript
â”œâ”€â”€ prisma/
â”‚   â”œâ”€â”€ schema.prisma        # Esquema de base de datos
â”‚   â””â”€â”€ migrations/          # Migraciones de DB
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ app/                 # Next.js App Router
â”‚   â”‚   â”œâ”€â”€ (auth)/         # Rutas de autenticaciÃ³n
â”‚   â”‚   â”œâ”€â”€ (dashboard)/    # Rutas del dashboard
â”‚   â”‚   â”œâ”€â”€ api/            # API routes
â”‚   â”‚   â”œâ”€â”€ globals.css     # Estilos globales
â”‚   â”‚   â”œâ”€â”€ layout.tsx      # Layout principal
â”‚   â”‚   â””â”€â”€ page.tsx        # PÃ¡gina principal
â”‚   â”œâ”€â”€ components/         # Componentes reutilizables
â”‚   â”‚   â”œâ”€â”€ ui/            # Componentes base (shadcn/ui)
â”‚   â”‚   â”œâ”€â”€ forms/         # Formularios especÃ­ficos
â”‚   â”‚   â”œâ”€â”€ layouts/       # Layouts especÃ­ficos
â”‚   â”‚   â””â”€â”€ common/        # Componentes comunes
â”‚   â”œâ”€â”€ features/          # MÃ³dulos por funcionalidad
â”‚   â”‚   â”œâ”€â”€ auth/          # AutenticaciÃ³n
â”‚   â”‚   â”œâ”€â”€ employees/     # GestiÃ³n empleados
â”‚   â”‚   â”œâ”€â”€ contracts/     # GestiÃ³n contratos
â”‚   â”‚   â”œâ”€â”€ dashboard/     # Dashboard
â”‚   â”‚   â””â”€â”€ admin/         # AdministraciÃ³n
â”‚   â”œâ”€â”€ lib/               # Utilidades y configuraciones
â”‚   â”œâ”€â”€ hooks/             # Custom React hooks
â”‚   â”œâ”€â”€ types/             # Definiciones TypeScript
â”‚   â””â”€â”€ constants/         # Constantes de la aplicaciÃ³n
â””â”€â”€ tests/                 # Testing
FUNCIONALIDADES CORE A IMPLEMENTAR
1. Sistema de AutenticaciÃ³n y Roles

Login/logout seguro con NextAuth.js
Sistema de roles jerÃ¡rquicos (6 niveles)
Permisos granulares por mÃ³dulo y departamento
Sesiones con rotaciÃ³n automÃ¡tica de tokens
2FA opcional para roles crÃ­ticos

2. GestiÃ³n de Empleados

CRUD completo de empleados
ValidaciÃ³n de cÃ©dulas venezolanas (V/E-12345678)
GestiÃ³n de jerarquÃ­as (supervisor-subordinado)
Estados: Activo, Inactivo, En PerÃ­odo de Prueba
AuditorÃ­a completa de cambios

3. GestiÃ³n de Contratos y Movimientos

Tipos de contrato venezuelanos
Movimientos internos (ascensos, traslados)
ValidaciÃ³n de solapamiento de fechas
Workflow de aprobaciones
Renovaciones automÃ¡ticas

4. PerÃ­odos de Prueba

GestiÃ³n unificada (nuevos ingresos + movimientos)
Alertas automÃ¡ticas 5 dÃ­as antes del vencimiento
Sistema de feedback del supervisor
Estados y transiciones controladas

5. Dashboard Personalizable

Widgets especÃ­ficos por rol
Indicadores en tiempo real
Filtros por departamento/gerencia
Alertas y notificaciones
Reportes exportables

6. Sistema de AuditorÃ­a

Log completo de cambios
Trazabilidad de acciones
IP y User-Agent tracking
Reportes de auditorÃ­a

REGLAS DE DESARROLLO OBLIGATORIAS
âœ… TIPADO ESTRICTO

TypeScript en modo estricto
Prohibido usar any
Interfaces definidas para todos los datos
ValidaciÃ³n con Zod en todas las APIs

âœ… SEGURIDAD

VerificaciÃ³n de permisos en cada API route
SanitizaciÃ³n de inputs obligatoria
Cifrado de datos sensibles (cÃ©dulas)
RotaciÃ³n automÃ¡tica de tokens de sesiÃ³n

âœ… VALIDACIONES VENEZOLANAS
typescript// CÃ©dula venezolana: V-12345678 o E-12345678
const cedulaRegex = /^[VE]-\d{7,8}$/;

// RIF empresarial: J-123456789-0
const rifRegex = /^[JGC]-\d{8,9}-\d$/;
âœ… MANEJO DE ERRORES

Try-catch en todas las operaciones async
Logging de errores obligatorio
Respuestas de error consistentes
AuditorÃ­a de errores crÃ­ticos

âœ… PERFORMANCE

Lazy loading de componentes pesados
Queries optimizadas con select especÃ­ficos
PaginaciÃ³n en listados grandes
Caching inteligente

âœ… TESTING

Tests unitarios para validadores
Tests de integraciÃ³n para APIs
Coverage mÃ­nimo del 80%
Mocks para servicios externos

CONVENCIONES DE CÃ“DIGO
Commits en espaÃ±ol con prefijos:
bashfeat(auth): implementar autenticaciÃ³n con NextAuth
fix(employees): corregir validaciÃ³n de cÃ©dula venezolana
refactor(dashboard): optimizar queries de indicadores
Nomenclatura:

Archivos: kebab-case (employee-form.tsx)
Componentes: PascalCase (EmployeeForm)
Variables: camelCase (employeeData)
Constantes: UPPER_SNAKE_CASE (MAX_EMPLOYEES)
APIs: RESTful (/api/employees, /api/employees/[id])

Estructura de API Routes:
typescriptexport async function GET(request: Request) {
  try {
    // 1. Verificar autenticaciÃ³n
    // 2. Verificar permisos
    // 3. Validar parÃ¡metros
    // 4. Ejecutar operaciÃ³n
    // 5. Auditar acciÃ³n
    // 6. Retornar respuesta
  } catch (error) {
    // Manejo de errores estÃ¡ndar
  }
}
VARIABLES DE ENTORNO REQUERIDAS
bash# Database
DATABASE_URL="postgresql://user:pass@host:port/db"
DIRECT_URL="postgresql://user:pass@host:port/db"

# Supabase
NEXT_PUBLIC_SUPABASE_URL="your-supabase-url"
NEXT_PUBLIC_SUPABASE_ANON_KEY="your-supabase-anon-key"
SUPABASE_SERVICE_ROLE_KEY="your-service-role-key"

# NextAuth
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="your-secret-key"

# Encryption
ENCRYPTION_KEY="your-encryption-key-32-chars"
ESQUEMA DE BASE DE DATOS
El proyecto utiliza un esquema PostgreSQL normalizado con las siguientes tablas principales:

Empleados: Datos principales del empleado
Usuarios: Credenciales y autenticaciÃ³n
Roles/Usuarios_Roles: Sistema de permisos
Departamentos/Gerencias/Cargos: Estructura organizacional
Movimientos: Cambios de posiciÃ³n/contrato
Periodos_Prueba: GestiÃ³n de perÃ­odos de prueba
Egresos: Proceso de salida de empleados
Auditoria: Trazabilidad completa
Sesiones: GestiÃ³n de sesiones activas

FASES DE DESARROLLO
FASE 1: FundaciÃ³n (ACTUAL)

Setup de proyecto en Replit
ConfiguraciÃ³n de Supabase y Prisma
Sistema de autenticaciÃ³n base
Componentes UI fundamentales

FASE 2: Core de Usuarios

GestiÃ³n avanzada de roles
Sistema de permisos granulares
AuditorÃ­a y logging

FASE 3: MÃ³dulos de GestiÃ³n

GestiÃ³n de empleados
GestiÃ³n de contratos
PerÃ­odos de prueba
Proceso de egresos

FASE 4: Dashboard y Analytics

Dashboard personalizable
Sistema de alertas
Reportes y mÃ©tricas

FASE 5: OptimizaciÃ³n

Testing integral
Performance optimization
DocumentaciÃ³n final

CONTEXTO ADICIONAL IMPORTANTE

UbicaciÃ³n: Venezuela (validaciones locales de cÃ©dula/RIF)
Marco Legal: Ley OrgÃ¡nica de ProtecciÃ³n de Datos Personales (2021)
Usuarios objetivo: Equipos de RRHH de empresas medianas/grandes
Roles principales: Gerente RRHH, Admin RRHH, Supervisores, Empleados CaptaciÃ³n
Funcionalidades crÃ­ticas: AuditorÃ­a, seguridad, workflow de aprobaciones

Â¡EMPEZAR DESARROLLO INMEDIATAMENTE!